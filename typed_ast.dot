digraph TypedAST {
  node [shape=box];
  node0 [label="Program:\nClass Base {\n  x : Int <- 10;\n  getX() : Int {\n    x;\n  };\n}\nClass Main inherits Base {\n  y : Int <- 20;\n  z : Bool <- true;\n  add(n1 : Int, n2 : Int) : Int {\n    (n1 + n2);\n  };\n  testIf() : Int {\n    if z then y else x fi;\n  };\n}\n"];
  node0 -> node1;
  node1 [label="Class Base {\n  x : Int <- 10;\n  getX() : Int {\n    x;\n  };\n}"];
  node1 -> node2;
  node2 [label="x : Int <- 10;"];
  node3 [label="Init"];
  node2 -> node3;
  node3 -> node4;
  node4 [label="10 : Int"];
  node1 -> node5;
  node5 [label="getX() : Int {\n    x;\n  };"];
  node6 [label="Body"];
  node5 -> node6;
  node6 -> node7;
  node7 [label="x : Int"];
  node0 -> node8;
  node8 [label="Class Main inherits Base {\n  y : Int <- 20;\n  z : Bool <- true;\n  add(n1 : Int, n2 : Int) : Int {\n    (n1 + n2);\n  };\n  testIf() : Int {\n    if z then y else x fi;\n  };\n}"];
  node8 -> node9;
  node9 [label="y : Int <- 20;"];
  node10 [label="Init"];
  node9 -> node10;
  node10 -> node11;
  node11 [label="20 : Int"];
  node8 -> node12;
  node12 [label="z : Bool <- true;"];
  node13 [label="Init"];
  node12 -> node13;
  node13 -> node14;
  node14 [label="true : Bool"];
  node8 -> node15;
  node15 [label="add(n1 : Int, n2 : Int) : Int {\n    (n1 + n2);\n  };"];
  node16 [label="Parameters"];
  node15 -> node16;
  node17 [label="n1 : Int"];
  node16 -> node17;
  node18 [label="n2 : Int"];
  node16 -> node18;
  node19 [label="Body"];
  node15 -> node19;
  node19 -> node20;
  node20 [label="(n1 + n2) : Int"];
  node20 -> node21;
  node21 [label="n1 : Int"];
  node20 -> node22;
  node22 [label="n2 : Int"];
  node8 -> node23;
  node23 [label="testIf() : Int {\n    if z then y else x fi;\n  };"];
  node24 [label="Body"];
  node23 -> node24;
  node24 -> node25;
  node25 [label="if z then y else x fi : Int"];
  node26 [label="Condition"];
  node25 -> node26;
  node26 -> node27;
  node27 [label="z : Bool"];
  node28 [label="Then"];
  node25 -> node28;
  node28 -> node29;
  node29 [label="y : Int"];
  node30 [label="Else"];
  node25 -> node30;
  node30 -> node31;
  node31 [label="x : Int"];
}
